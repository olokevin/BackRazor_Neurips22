dataset: ImageNet
# choices=[
#     'aircraft', 'car', 'flowers102',
#     'food101', 'cub200', 'pets',
#     'cifar10', 'cifar100', 'ImageNet',])
train_batch_size: 512

n_epochs: 100
init_lr: 0.03
weight_decay: 0.0001

# net: proxyless_mobile
net: mcunet-in1
# choices=['proxyless_mobile', 'resnet', 'mcunet'])

transfer_learning_method: 'full'
# choices=[
#   'full', 'full_noBN', 'bn+last', 'last',
#   'tinytl-bias', 'tinytl-lite_residual', 'tinytl-lite_residual+bias'])
origin_network: false

weight_quantization: false
frozen_param_bits: 8

weight_standardization: true

ZO_Estim:
  ####### ZO_Estim_MC #######
  # en: True
  name: ZO_Estim_MC
  sigma: 0.01
  n_sample: 10
  signSGD: False

  trainable_param_list: all

  trainable_layer_list: all

  quantize_method: None

  mask_method: None
  # mask_method: block-10
  # mask_method: layer

  estimate_method: forward
  # estimate_method: antithetic

  # obj_fn_type: classifier
  # perturb_method: batch

  obj_fn_type: classifier_layerwise
  perturb_method: activation

  # obj_fn_type: classifier_row
  # perturb_method: single

  # sample_method: uniform
  # sample_method: gaussian
  # sample_method: bernoulli
  sample_method: coord_basis

  prior_method: None
  # prior_method: last_grad_perturb
  # prior_method: mov_avg_perturb
  # prior_method: last_grad_neighbor


# mcunet test
# CUDA_VISIBLE_DEVICES=0 python CNN/tinytl_fgvc_train.py configs/CNN/mcunet.yaml --path .exp/batch8/ImageNet/mcunet --eval_only --dataset ImageNet

# CUDA_VISIBLE_DEVICES=0 python CNN/tinytl_fgvc_train.py configs/CNN/mcunet.yaml